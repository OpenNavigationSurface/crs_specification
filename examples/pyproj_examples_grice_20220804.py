# -*- coding: utf-8 -*-
"""2022-06-02_garice_pyproj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dary9d_xzfvDy-R1uvSLR-eNaVl8JFGl

Examples for creating CRS objects and doing transformations in pyproj.

Mostly created by Jack Riley and hacked some with Eric Younkin's help.  Thanks Jack and Eric!

An example of the kinds of transformations we are trying to support can be found [here](https://github.com/noaa-ocs-hydrography/vyperdatum/blob/ffbc4a93d49b5cceae5fadd494ddcf9bfb322e6f/vyperdatum/pipeline.py#L20)
"""

import os
import sys

!pip install pyproj

import pyproj

pyproj.__version__

pyproj.proj_version_str

pyproj.network.set_network_enabled(active=True)

"""###1) Build a 3D projected coordinate reference system to the ellipsoid and conduct a vertical transform (NAVD88 ensemble)."""

crs_NAD83_2011_UTM_14N_3d = pyproj.CRS('EPSG:6343').to_3d()
crs_NAD83_2011_NAVD88_h = 'EPSG:6349'
t = pyproj.Transformer.from_crs(crs_NAD83_2011_UTM_14N_3d,crs_NAD83_2011_NAVD88_h,always_xy=True)
x,y,z = (615339.3434008883,),(5063811.529611911,),(0.,)
print(f'Transform from NAD83 2011: {(x,y,z)} to NAVD88:  {t.transform(x,y,z)}')
x,y,z = (615339.3434008883,),(5063811.529611911,),(10.,)
print(f'Transform from NAD83 2011: {(x,y,z)} to NAVD88:  {t.transform(x,y,z)}')

"""1.1) Demonstrate WKT2"""

print(crs_NAD83_2011_UTM_14N_3d.to_wkt("WKT2_2019",pretty=True))

"""1.2) WKT1 is not functional for this description, at least in this case."""

print(crs_NAD83_2011_UTM_14N_3d.to_wkt("WKT1_GDAL",pretty=True))

"""### 2) Make a BoundCRS
#### We need (1) a source crs, (2) a target crs, and (3) a coordinate operation.
2.1) Our source CRS
"""

source_crs_wkt = 'COMPOUNDCRS["NAD83 / UTM zone 15N + NOAA Chart Datum",PROJCRS["NAD83 / UTM zone 15N",BASEGEOGCRS["NAD83",DATUM["North American Datum 1983",ELLIPSOID["GRS 1980",6378137,298.257222101,LENGTHUNIT["metre",1]]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433]],ID["EPSG",4269]],CONVERSION["UTM zone 15N",METHOD["Transverse Mercator",ID["EPSG",9807]],PARAMETER["Latitude of natural origin",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8801]],PARAMETER["Longitude of natural origin",-93,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8802]],PARAMETER["Scale factor at natural origin",0.9996,SCALEUNIT["unity",1],ID["EPSG",8805]],PARAMETER["False easting",500000,LENGTHUNIT["metre",1],ID["EPSG",8806]],PARAMETER["False northing",0,LENGTHUNIT["metre",1],ID["EPSG",8807]]],CS[Cartesian,2],AXIS["(E)",east,ORDER[1],LENGTHUNIT["metre",1]],AXIS["(N)",north,ORDER[2],LENGTHUNIT["metre",1]],USAGE[SCOPE["Engineering survey, topographic mapping."],AREA["North America - between 96°W and 90°W - onshore and offshore. Canada - Manitoba; Nunavut; Ontario. United States (USA) - Arkansas; Illinois; Iowa; Kansas; Louisiana; Michigan; Minnesota; Mississippi; Missouri; Nebraska; Oklahoma; Tennessee; Texas; Wisconsin."],BBOX[25.61,-96,84,-90]],ID["EPSG",26915]],VERTCRS["NOAA Chart Datum",VDATUM["NOAA Chart Datum"],CS[vertical,1],AXIS["gravity-related height (H)",up,LENGTHUNIT["metre",1,ID["EPSG",9001]]]]]'
source_crs = pyproj.CRS.from_wkt(source_crs_wkt)

"""2.2) Our target CRS"""

target_crs = pyproj.CRS('EPSG:6344').to_3d()

"""2.3) Make the coordinate operation

We will start by making a valid transformation object, for which we need the files to reference and will be pulled via FTP for this example.
"""

from ftplib import FTP
from zipfile import ZipFile
with FTP('ocsftp.ncd.noaa.gov') as ocs_ftp:
  ocs_ftp.login()
  ocs_ftp.cwd('HSTB')
  with open('vdatum.zip', 'wb') as vdatum_zip:
    ocs_ftp.retrbinary('RETR vdatum.zip', vdatum_zip.write)
with ZipFile('vdatum.zip') as vdatum:
  vdatum.extractall()
pyproj.datadir.append_data_dir('vdatum')

"""Add these files to pyproj."""

pyproj.datadir.append_data_dir('vdatum')

"""Make the transformation object"""

pipeline_str = 'proj=pipeline inv step proj=vgridshift grids=core/geoid12b/g2012bu0.gtx step proj=vgridshift grids=TXlaggal01_8301/tss.gtx inv step proj=vgridshift grids=TXlaggal01_8301/mllw.gtx'
mllw_to_NAD83 = pyproj.Transformer.from_pipeline(pipeline_str)

"""Build the pyproj Coordinate Operation Object as a json dict"""

coop_json = {}
coop_json['$schema'] = target_crs.to_json_dict()['$schema']
coop_json['type'] = 'Transformation'
coop_json['name'] = 'MLLW to NAD83(2011)'
coop_json['source_crs'] = source_crs.to_json_dict()
coop_json['target_crs'] = target_crs.to_json_dict()
coop_json['method'] = mllw_to_NAD83.to_json_dict()['method']
params = [{'name': 'Geoid (height correction) model file', 'value': 'core\\geoid12b\\g2012bu0.gtx'},
 {'name': 'TSS (height correction) model file', 'value': 'TXlaggal01_8301\\tss.gtx'},
 {'name': 'MLLW (height correction) model file', 'value': 'TXlaggal01_8301\\mllw.gtx'}]
coop_json['parameters'] = params
coop = pyproj.crs.CoordinateOperation.from_json_dict(coop_json)

"""Build the BoundCRS"""

mllw_as_boundcrs = pyproj.crs.BoundCRS(source_crs, target_crs, coop)
print(mllw_as_boundcrs.to_wkt(version='WKT2_2019', pretty=True))